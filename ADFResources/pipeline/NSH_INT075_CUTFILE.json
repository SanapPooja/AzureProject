{
	"name": "NSH_INT075_CUTFILE",
	"properties": {
		"activities": [
			{
				"name": "CutFiles",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"sqlReaderQuery": "SELECT DISTINCT fld_r_run_no as RunNo\r\n    ,fld_r_dia_ref  as Dia\r\n    ,fld_r_prod_type_ref as ProdType\r\nFROM (\r\n    SELECT fld_r_run_no\r\n        ,fld_r_prod_type_ref = CASE\r\n            WHEN fld_r_prod_type_ref = 'H'\r\n                THEN 'H'\r\n            WHEN fld_r_prod_type_ref = 'T'\r\n                THEN 'H'\r\n            ELSE fld_r_prod_type_ref\r\n            END\r\n        ,fld_r_start_stock_len\r\n        ,fld_r_dia_ref\r\n        ,cast(fld_l_comb_no AS INT) AS fld_l_comb_no\r\n        ,fld_d_cutting_seq_no\r\n        ,fld_l_qty_of_segment\r\n        ,fld_l_stock_bars_len\r\n        ,convert(NUMERIC(18, 0), isnull(fld_d_no_of_cuts, 0)) AS fld_d_no_of_cuts\r\n        ,fld_d_section_no\r\n        ,fld_d_bin_number = CASE\r\n            WHEN (\r\n                    fld_d_bin_number = 'NULL'\r\n                    OR isnull(fld_d_bin_number, ' ') = ' '\r\n                    )\r\n                THEN ' '\r\n            ELSE fld_d_bin_number\r\n            END\r\n        ,fld_d_cut_length\r\n        ,fld_d_tag_ref_info\r\n        ,isnull(fld_d_straight_bend_flag, ' ') AS fld_d_straight_bend_flag\r\n        ,isnull(fld_d_tag_no, '0') AS fld_d_tag_no\r\n        ,fld_rec_type\r\n        ,fld_d_bbs_bar_mark_info = CASE\r\n            WHEN (\r\n                    fld_d_offcut_ind = 'Y'\r\n                    AND (\r\n                        fld_d_bin_number <> 'NULL'\r\n                        AND isnull(fld_d_bin_number, ' ') <> ' '\r\n                        )\r\n                    )\r\n                THEN 'OFFCUT'\r\n            ELSE fld_d_bbs_bar_mark_info\r\n            END\r\n        ,isnull(fld_d_flag_info, ' ') AS fld_d_flag_info\r\n    FROM sts.dbo.tbl_scm_sts_rms_cab_shear\r\n    WHERE isnull(fld_r_run_no, '') <> ''\r\n        AND fld_d_no_of_cuts > 0\r\n    ) AS A\r\nWHERE A.fld_d_bbs_bar_mark_info <> ''\r\n    AND fld_rec_type <> 'S'\r\nORDER BY fld_r_run_no\r\n    ,fld_r_dia_ref",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "STS_RMS_CAB_SHEAR",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Run_No_Array",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "CutFiles",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "RunNoArr",
					"value": {
						"value": "@activity('CutFiles').output.value",
						"type": "Expression"
					}
				}
			},
			{
				"name": "ForEach2",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Run_No_Array",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@variables('RunNoArr')",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Set variable3",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "RunNo",
								"value": {
									"value": "@item().RunNo",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set variable5",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "If Condition6",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "STSRunCnt",
								"value": {
									"value": "@activity('Lookup4').output.value[0].countSTS",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Lookup3",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "Set variable3",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "OracleSource",
									"oracleReaderQuery": {
										"value": "select r_run_no, count(1) as countIDB from scm_admin.cab_rms_shearline_download where r_run_no in ('@{variables('RunNo')}') group by r_run_no",
										"type": "Expression"
									},
									"partitionOption": "None",
									"queryTimeout": "02:00:00"
								},
								"dataset": {
									"referenceName": "SCM_IDB_DB",
									"type": "DatasetReference"
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "Lookup4",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "If Condition5",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlServerSource",
									"sqlReaderQuery": {
										"value": "select fld_r_run_no,count(1) as countSTS from [dbo].[tbl_scm_sts_rms_cab_shear] where fld_r_run_no in ('@{variables('RunNo')}') group by fld_r_run_no",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "NSQADB2",
									"type": "DatasetReference"
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "If Condition4",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Set variable5",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@if(empty(activity('Lookup3').output.value), false, equals(activity('Lookup3').output.value[0].countIDB, activity('Lookup3').output.value[0].countSTS))",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "Copy data1",
										"type": "Copy",
										"state": "Inactive",
										"onInactiveMarkAs": "Succeeded",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "SqlServerSource",
												"sqlReaderQuery": "\t SELECT DISTINCT fld_r_run_no\r\n    ,fld_r_dia_ref\r\n    ,fld_r_prod_type_ref\r\nFROM (\r\n    SELECT fld_r_run_no\r\n        ,fld_r_prod_type_ref = CASE\r\n            WHEN fld_r_prod_type_ref = 'H'\r\n                THEN 'H'\r\n            WHEN fld_r_prod_type_ref = 'T'\r\n                THEN 'H'\r\n            ELSE fld_r_prod_type_ref\r\n            END\r\n        ,fld_r_start_stock_len\r\n        ,fld_r_dia_ref\r\n        ,cast(fld_l_comb_no AS INT) AS fld_l_comb_no\r\n        ,fld_d_cutting_seq_no\r\n        ,fld_l_qty_of_segment\r\n        ,fld_l_stock_bars_len\r\n        ,convert(NUMERIC(18, 0), isnull(fld_d_no_of_cuts, 0)) AS fld_d_no_of_cuts\r\n        ,fld_d_section_no\r\n        ,fld_d_bin_number = CASE\r\n            WHEN (\r\n                    fld_d_bin_number = 'NULL'\r\n                    OR isnull(fld_d_bin_number, ' ') = ' '\r\n                    )\r\n                THEN ' '\r\n            ELSE fld_d_bin_number\r\n            END\r\n        ,fld_d_cut_length\r\n        ,fld_d_tag_ref_info\r\n        ,isnull(fld_d_straight_bend_flag, ' ') AS fld_d_straight_bend_flag\r\n        ,isnull(fld_d_tag_no, '0') AS fld_d_tag_no\r\n        ,fld_rec_type\r\n        ,fld_d_bbs_bar_mark_info = CASE\r\n            WHEN (\r\n                    fld_d_offcut_ind = 'Y'\r\n                    AND (\r\n                        fld_d_bin_number <> 'NULL'\r\n                        AND isnull(fld_d_bin_number, ' ') <> ' '\r\n                        )\r\n                    )\r\n                THEN 'OFFCUT'\r\n            ELSE fld_d_bbs_bar_mark_info\r\n            END\r\n        ,isnull(fld_d_flag_info, ' ') AS fld_d_flag_info\r\n    FROM sts.dbo.tbl_scm_sts_rms_cab_shear\r\n    WHERE isnull(fld_r_run_no, '') <> ''\r\n        AND fld_d_no_of_cuts > 0\r\n    ) AS A\r\nWHERE A.fld_d_bbs_bar_mark_info <> ''\r\n    AND fld_rec_type <> 'S'\r\nORDER BY fld_r_run_no\r\n    ,fld_r_dia_ref",
												"queryTimeout": "02:00:00",
												"partitionOption": "None"
											},
											"sink": {
												"type": "RestSink",
												"httpRequestTimeout": "00:05:00",
												"requestInterval": 10,
												"requestMethod": "POST",
												"writeBatchSize": 10000,
												"httpCompressionType": "none"
											},
											"enableStaging": false,
											"translator": {
												"type": "TabularTranslator",
												"mappings": [
													{
														"source": {
															"name": "fld_r_run_no",
															"type": "String"
														},
														"sink": {
															"path": "$['fld_r_run_no']"
														}
													},
													{
														"source": {
															"name": "fld_r_dia_ref",
															"type": "Decimal"
														},
														"sink": {
															"path": "$['fld_r_dia_ref']"
														}
													},
													{
														"source": {
															"name": "fld_r_prod_type_ref",
															"type": "String"
														},
														"sink": {
															"path": "$['fld_r_prod_type_ref']"
														}
													}
												]
											}
										},
										"inputs": [
											{
												"referenceName": "NSQADB2",
												"type": "DatasetReference"
											}
										],
										"outputs": [
											{
												"referenceName": "NSH_INT075_CUT_FILE_QUEUE",
												"type": "DatasetReference"
											}
										]
									},
									{
										"name": "Copy data2",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "SqlServerSource",
												"sqlReaderQuery": "SELECT fld_d_no_of_cuts\t\t\t\t\t\t\t\t\r\n\t\t,fld_d_section_no\t\t\t\t\t\t\t\r\n\t\t,fld_d_bin_number\t\t\t\t\t\t\t\r\n\t\t,fld_d_cut_length\t\t\t\t\t\t\t\r\n\t\t,fld_d_tag_ref_info\t\t\t\t\t\t\t\r\n\t\t,fld_d_straight_bend_flag\t\t\t\t\t\t\t\r\n\t\t,fld_d_bbs_bar_mark_info\t\t\t\t\t\t\t\r\n\t\t,fld_d_tag_no\t\t\t\t\t\t\t\r\n\t\t,fld_d_flag_info\t\t\t\t\t\t\t\r\n\t\t,fld_d_cutting_seq_no\t\t\t\t\t\t\t\r\n\tFROM (\t\t\t\t\t\t\t\t\r\n\t\tSELECT fld_r_run_no\t\t\t\t\t\t\t\r\n\t\t\t,fld_r_prod_type_ref\t\t\t\t\t\t\r\n\t\t\t,fld_r_start_stock_len\t\t\t\t\t\t\r\n\t\t\t,fld_r_dia_ref\t\t\t\t\t\t\r\n\t\t\t,cast(fld_l_comb_no AS INT) AS fld_l_comb_no\t\t\t\t\t\t\r\n\t\t\t,fld_d_cutting_seq_no\t\t\t\t\t\t\r\n\t\t\t,fld_l_qty_of_segment\t\t\t\t\t\t\r\n\t\t\t,fld_l_stock_bars_len\t\t\t\t\t\t\r\n\t\t\t,convert(NUMERIC(18, 0), isnull(fld_d_no_of_cuts, 0)) AS fld_d_no_of_cuts\t\t\t\t\t\t\r\n\t\t\t,fld_d_section_no\t\t\t\t\t\t\r\n\t\t\t,fld_d_bin_number = CASE \t\t\t\t\t\t\r\n\t\t\t\tWHEN (\t\t\t\t\t\r\n\t\t\t\t\t\tfld_d_bin_number = 'NULL'\t\t\t\r\n\t\t\t\t\t\tOR isnull(fld_d_bin_number, ' ') = ' '\t\t\t\r\n\t\t\t\t\t\t)\t\t\t\r\n\t\t\t\t\tTHEN ' '\t\t\t\t\r\n\t\t\t\tELSE fld_d_bin_number\t\t\t\t\t\r\n\t\t\t\tEND\t\t\t\t\t\r\n\t\t\t,fld_d_cut_length\t\t\t\t\t\t\r\n\t\t\t,fld_d_tag_ref_info\t\t\t\t\t\t\r\n\t\t\t,isnull(fld_d_straight_bend_flag, ' ') AS fld_d_straight_bend_flag\t\t\t\t\t\t\r\n\t\t\t,isnull(fld_d_tag_no, '0') AS fld_d_tag_no\t\t\t\t\t\t\r\n\t\t\t,fld_rec_type\t\t\t\t\t\t\r\n\t\t\t,fld_d_bbs_bar_mark_info = CASE \t\t\t\t\t\t\r\n\t\t\t\tWHEN (\t\t\t\t\t\r\n\t\t\t\t\t\tfld_d_offcut_ind = 'Y'\t\t\t\r\n\t\t\t\t\t\tAND (\t\t\t\r\n\t\t\t\t\t\t\tfld_d_bin_number <> 'NULL'\t\t\r\n\t\t\t\t\t\t\tAND isnull(fld_d_bin_number, ' ') <> ' '\t\t\r\n\t\t\t\t\t\t\t)\t\t\r\n\t\t\t\t\t\t)\t\t\t\r\n\t\t\t\t\tTHEN 'OFFCUT'\t\t\t\t\r\n\t\t\t\tELSE fld_d_bbs_bar_mark_info\t\t\t\t\t\r\n\t\t\t\tEND\t\t\t\t\t\r\n\t\t\t,isnull(fld_d_flag_info, ' ') AS fld_d_flag_info\t\t\t\t\t\t\r\n\t\tFROM sts.dbo.tbl_scm_sts_rms_cab_shear\t\t\t\t\t\t\t\r\n\t\tWHERE isnull(fld_r_run_no, '') <> ''\t\t\t\t\t\t\t\r\n\t\t\tAND fld_d_no_of_cuts > 0\t\t\t\t\t\t\r\n\t\t) AS A\t\t\t\t\t\t\t\r\n\tWHERE A.fld_d_bbs_bar_mark_info <> ''\t\t\t\t\t\t\t\t\r\n\t\t--AND fld_rec_type <> 'S'\t\t\t\t\t\t\t\r\n\t\tAND A.fld_r_run_no = 'H205184L0000'\t\t\t\t\t\r\n\t\tAND A.fld_r_dia_ref = 32.000000000\t\t\t\t\t\t\t\r\n\t\tAND A.fld_l_comb_no = 46\t\t\t\t\t\t\t\t\r\n\t\tAND A.fld_r_prod_type_ref = 'H'\t\t\t\t\t\t\t\r\n\tORDER BY A.fld_r_run_no\t\t\t\t\t\t\t\t\r\n\t\t,A.fld_r_dia_ref ASC\t\t\t\t\t\t\t\r\n\t\t,A.fld_l_comb_no ASC\t\t\t\t\t\t\t\r\n\t\t,A.fld_d_cutting_seq_no ASC\t",
												"queryTimeout": "02:00:00",
												"partitionOption": "None"
											},
											"sink": {
												"type": "DelimitedTextSink",
												"storeSettings": {
													"type": "FileServerWriteSettings",
													"copyBehavior": "PreserveHierarchy"
												},
												"formatSettings": {
													"type": "DelimitedTextWriteSettings",
													"maxRowsPerFile": 1,
													"fileNamePrefix": {
														"value": "@{variables('RunNo')}",
														"type": "Expression"
													},
													"quoteAllText": true,
													"fileExtension": ".OUS"
												}
											},
											"enableStaging": false,
											"translator": {
												"type": "TabularTranslator",
												"typeConversion": true,
												"typeConversionSettings": {
													"allowDataTruncation": true,
													"treatBooleanAsNumber": false
												}
											}
										},
										"inputs": [
											{
												"referenceName": "NSQADB2",
												"type": "DatasetReference"
											}
										],
										"outputs": [
											{
												"referenceName": "CutTextFile",
												"type": "DatasetReference"
											}
										]
									}
								]
							}
						},
						{
							"name": "If Condition5",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Lookup3",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@if(empty(activity('Lookup3').output.value), true, or(equals(activity('Lookup3').output.value[0].countIDB, null), equals(activity('Lookup3').output.value[0].countIDB, 0)))\n",
									"type": "Expression"
								}
							}
						},
						{
							"name": "If Condition6",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Lookup4",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@if(empty(activity('Lookup4').output.value), true, or(equals(activity('Lookup4').output.value[0].countSTS, null), equals(activity('Lookup4').output.value[0].countSTS, 0)))",
									"type": "Expression"
								}
							}
						}
					]
				}
			}
		],
		"annotations": []
	}
}